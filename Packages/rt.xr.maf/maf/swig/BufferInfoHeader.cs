//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace maf {

public class BufferInfoHeader : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BufferInfoHeader(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BufferInfoHeader obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(BufferInfoHeader obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~BufferInfoHeader() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mafPINVOKE.delete_BufferInfoHeader(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public float timestampDelta {
    set {
      mafPINVOKE.BufferInfoHeader_timestampDelta_set(swigCPtr, value);
    } 
    get {
      float ret = mafPINVOKE.BufferInfoHeader_timestampDelta_get(swigCPtr);
      return ret;
    } 
  }

  public bool immutable {
    set {
      mafPINVOKE.BufferInfoHeader_immutable_set(swigCPtr, value);
    } 
    get {
      bool ret = mafPINVOKE.BufferInfoHeader_immutable_get(swigCPtr);
      return ret;
    } 
  }

  public ComponentType componentType {
    set {
      mafPINVOKE.BufferInfoHeader_componentType_set(swigCPtr, (int)value);
    } 
    get {
      ComponentType ret = (ComponentType)mafPINVOKE.BufferInfoHeader_componentType_get(swigCPtr);
      return ret;
    } 
  }

  public SampleType type {
    set {
      mafPINVOKE.BufferInfoHeader_type_set(swigCPtr, (int)value);
    } 
    get {
      SampleType ret = (SampleType)mafPINVOKE.BufferInfoHeader_type_get(swigCPtr);
      return ret;
    } 
  }

  public bool normalized {
    set {
      mafPINVOKE.BufferInfoHeader_normalized_set(swigCPtr, value);
    } 
    get {
      bool ret = mafPINVOKE.BufferInfoHeader_normalized_get(swigCPtr);
      return ret;
    } 
  }

  public uint byteOffset {
    set {
      mafPINVOKE.BufferInfoHeader_byteOffset_set(swigCPtr, value);
    } 
    get {
      uint ret = mafPINVOKE.BufferInfoHeader_byteOffset_get(swigCPtr);
      return ret;
    } 
  }

  public uint count {
    set {
      mafPINVOKE.BufferInfoHeader_count_set(swigCPtr, value);
    } 
    get {
      uint ret = mafPINVOKE.BufferInfoHeader_count_get(swigCPtr);
      return ret;
    } 
  }

  public global::System.IntPtr max {
    set {
      mafPINVOKE.BufferInfoHeader_max_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr ret = mafPINVOKE.BufferInfoHeader_max_get(swigCPtr);
      return ret;
    } 
  }

  public global::System.IntPtr min {
    set {
      mafPINVOKE.BufferInfoHeader_min_set(swigCPtr, value);
    } 
    get {
      global::System.IntPtr ret = mafPINVOKE.BufferInfoHeader_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint bufferViewByteOffset {
    set {
      mafPINVOKE.BufferInfoHeader_bufferViewByteOffset_set(swigCPtr, value);
    } 
    get {
      uint ret = mafPINVOKE.BufferInfoHeader_bufferViewByteOffset_get(swigCPtr);
      return ret;
    } 
  }

  public uint bufferViewByteLength {
    set {
      mafPINVOKE.BufferInfoHeader_bufferViewByteLength_set(swigCPtr, value);
    } 
    get {
      uint ret = mafPINVOKE.BufferInfoHeader_bufferViewByteLength_get(swigCPtr);
      return ret;
    } 
  }

  public uint bufferViewByteStride {
    set {
      mafPINVOKE.BufferInfoHeader_bufferViewByteStride_set(swigCPtr, value);
    } 
    get {
      uint ret = mafPINVOKE.BufferInfoHeader_bufferViewByteStride_get(swigCPtr);
      return ret;
    } 
  }

  public int GetHeaderSize() {
    int ret = mafPINVOKE.BufferInfoHeader_GetHeaderSize(swigCPtr);
    return ret;
  }

  public void WriteAccessorHeader(global::System.IntPtr data) {
    mafPINVOKE.BufferInfoHeader_WriteAccessorHeader(swigCPtr, data);
  }

  public void ReadAccessorHeader(global::System.IntPtr data) {
    mafPINVOKE.BufferInfoHeader_ReadAccessorHeader(swigCPtr, data);
  }

  public static BufferInfoHeaderArray CreateAccessorsHeaders(BufferInfoArray bufferInfo, bool immutable) {
    global::System.IntPtr cPtr = mafPINVOKE.BufferInfoHeader_CreateAccessorsHeaders(BufferInfoArray.getCPtr(bufferInfo), immutable);
    BufferInfoHeaderArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new BufferInfoHeaderArray(cPtr, false);
    return ret;
  }

  public static void ComputeAccessorsHeadersInterleaved(BufferInfoHeaderArray headers) {
    mafPINVOKE.BufferInfoHeader_ComputeAccessorsHeadersInterleaved(BufferInfoHeaderArray.getCPtr(headers));
  }

  public static void ComputeAccessorsHeadersPlanar(BufferInfoHeaderArray headers) {
    mafPINVOKE.BufferInfoHeader_ComputeAccessorsHeadersPlanar(BufferInfoHeaderArray.getCPtr(headers));
  }

  public static void ComputeTotalHeadersLength(BufferInfoHeaderArray headers, out int bytelength) {
    mafPINVOKE.BufferInfoHeader_ComputeTotalHeadersLength(BufferInfoHeaderArray.getCPtr(headers), out bytelength);
  }

  public static void WriteAccessorsHeaders(global::System.IntPtr data, BufferInfoHeaderArray headers) {
    mafPINVOKE.BufferInfoHeader_WriteAccessorsHeaders(data, BufferInfoHeaderArray.getCPtr(headers));
  }

  public static void ReadAccessorsHeaders(global::System.IntPtr data, BufferInfoHeaderArray headers) {
    mafPINVOKE.BufferInfoHeader_ReadAccessorsHeaders(data, BufferInfoHeaderArray.getCPtr(headers));
  }

  public BufferInfoHeader() : this(mafPINVOKE.new_BufferInfoHeader(), true) {
  }

}

}
