//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace maf {

public class BufferHandler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BufferHandler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BufferHandler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(BufferHandler obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~BufferHandler() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          mafPINVOKE.delete_BufferHandler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public BufferHandler() : this(mafPINVOKE.new_BufferHandler(), true) {
  }

  public FrameArray getFrames() {
    global::System.IntPtr cPtr = mafPINVOKE.BufferHandler_getFrames(swigCPtr);
    FrameArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new FrameArray(cPtr, false);
    return ret;
  }

  public void allocate(byte capacity) {
    mafPINVOKE.BufferHandler_allocate__SWIG_0(swigCPtr, capacity);
  }

  public void allocate(byte capacity, uint maxFrameSize) {
    mafPINVOKE.BufferHandler_allocate__SWIG_1(swigCPtr, capacity, maxFrameSize);
  }

  public byte capacity() {
    byte ret = mafPINVOKE.BufferHandler_capacity(swigCPtr);
    return ret;
  }

  public byte count() {
    byte ret = mafPINVOKE.BufferHandler_count(swigCPtr);
    return ret;
  }

  public void free() {
    mafPINVOKE.BufferHandler_free(swigCPtr);
  }

  public int getReadIdx() {
    int ret = mafPINVOKE.BufferHandler_getReadIdx(swigCPtr);
    return ret;
  }

  public int getWriteIdx() {
    int ret = mafPINVOKE.BufferHandler_getWriteIdx(swigCPtr);
    return ret;
  }

  public int headerLength {
    set {
      mafPINVOKE.BufferHandler_headerLength_set(swigCPtr, value);
    } 
    get {
      int ret = mafPINVOKE.BufferHandler_headerLength_get(swigCPtr);
      return ret;
    } 
  }

  public void writeFrame(Frame frame) {
    mafPINVOKE.BufferHandler_writeFrame(swigCPtr, Frame.getCPtr(frame));
  }

  public void writeFrame2(Frame frame) {
    mafPINVOKE.BufferHandler_writeFrame2(swigCPtr, Frame.getCPtr(frame));
  }

  public void writeFrame3(Frame frame) {
    mafPINVOKE.BufferHandler_writeFrame3(swigCPtr, Frame.getCPtr(frame));
  }

  public Frame readFrame() {
    global::System.IntPtr cPtr = mafPINVOKE.BufferHandler_readFrame__SWIG_0(swigCPtr);
    Frame ret = (cPtr == global::System.IntPtr.Zero) ? null : new Frame(cPtr, false);
    return ret;
  }

  public Frame readFrame(SWIGTYPE_p_unsigned_long_long timestamp) {
    global::System.IntPtr cPtr = mafPINVOKE.BufferHandler_readFrame__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_long_long.getCPtr(timestamp));
    Frame ret = (cPtr == global::System.IntPtr.Zero) ? null : new Frame(cPtr, false);
    return ret;
  }

  public Frame readFrame(double time_s) {
    global::System.IntPtr cPtr = mafPINVOKE.BufferHandler_readFrame__SWIG_2(swigCPtr, time_s);
    Frame ret = (cPtr == global::System.IntPtr.Zero) ? null : new Frame(cPtr, false);
    return ret;
  }

  public void setOnFrameWriteCallback(SWIGTYPE_p_f___void onFrameWrite) {
    mafPINVOKE.BufferHandler_setOnFrameWriteCallback(swigCPtr, SWIGTYPE_p_f___void.getCPtr(onFrameWrite));
  }

  public void setOnFrameReadCallback(SWIGTYPE_p_f___void onFrameRead) {
    mafPINVOKE.BufferHandler_setOnFrameReadCallback(swigCPtr, SWIGTYPE_p_f___void.getCPtr(onFrameRead));
  }

}

}
